services:
  db:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1"

  redis:
    image: redis:alpine
    networks:
      - web_net
    restart: always
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: "0.5"

  web:
    build: .
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 2 --threads 2 --worker-class=gthread --timeout 120
      "
    env_file:
      - .env
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
    volumes:
      - django_static_volume:/app/staticfiles
      - django_media_volume:/app/mediafiles
      - /var/log/django:/var/log/django
    networks:
      - db_net
      - web_net
    depends_on:
      - db
      - redis
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "2"

  nginx:
    build: ./nginx
    volumes:
      - django_static_volume:/app/staticfiles
      - django_media_volume:/app/mediafiles
    ports:
      - "80:80"
      - "8000:8000"
    depends_on:
      - web
    networks:
      - web_net
    restart: always

  celery1:
    build: .
    command: celery -A config worker --loglevel=info --concurrency=4 --hostname=worker1@%h --max-tasks-per-child=1000
    env_file:
      - .env
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
    networks:
      - web_net
    depends_on:
      - db
      - redis
    restart: always
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: "0.5"

  celery2:
    build: .
    command: celery -A config worker --loglevel=info --concurrency=4 --hostname=worker2@%h --max-tasks-per-child=1000
    env_file:
      - .env
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
    networks:
      - web_net
    depends_on:
      - db
      - redis
    restart: always
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: "0.5"

  flower:
    build: .
    command: celery -A config flower
    env_file:
      - .env
    environment:
      BROKER_URL: ${REDIS_URL}
      RESULT_BACKEND: ${REDIS_URL}
      FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH}
    ports:
      - ${FLOWER_PORT}:5555
    networks:
      - web_net
    depends_on:
      - redis
      - celery1
      - celery2
    restart: always

networks:
  web_net:
  db_net:

volumes:
  django_static_volume:
  django_media_volume:
  postgres_data:
